AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS CloudFormation Template to deploy a fargate service"

Parameters:
  Revision:
    Type: String
    Description: 'Name of an existing EC2 KeyPair for SSH access'
    Default: '0'
  Memory:
    Type: String
    Description: 'The amount of memory you want your task to have'
    Default: 0.5 GB
  CPU:
    Type: String
    Description: 'The amount of vCPUs you want your task to have'
    Default: .25 vCPU
  MailgunDomain:
    Type: String
    Description: 'Mailgun Domain'
  MailgunApiKey:
    Type: String
    Description: 'Mailgun API Key'

Resources:

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref CPU
      Memory: !Ref Memory
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-${Revision}"
          Image:
            !Join
            - ""
            - - !ImportValue 'email-worker-ecr-export'
              - !Sub ":${Revision}"
          Essential: true
          Environment:
            - Name: QUEUE_URL
              Value: !ImportValue "email-worker-sqs-url-export"
            - Name: MAILGUN_DOMAIN
              Value: !Sub "${MailgunDomain}"
            - Name: MAILGUN_API_KEY
              Value: !Sub "${MailgunApiKey}"

          LogConfiguration:
            LogDriver: awslogs
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: !Ref TaskLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue general-cluster-export
      ServiceName: !Sub "${AWS::StackName}"
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      EnableExecuteCommand: True
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !ImportValue public-subnet-1-export
          SecurityGroups:
            - !Ref SecurityGroup
          AssignPublicIp: DISABLED
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue vpc-id-export
      GroupDescription: "Security Group for Fargate Service"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: "AmazonECSTaskExecutionRolePolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - logs:*
                  - ec2:*
                  - sqs:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:*
                Resource: "*"


  TaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}"
      RetentionInDays: 3
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"
