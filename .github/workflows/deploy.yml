name: Deploy Email Sender Service/Worker

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  deploy_infra:
    name: Deploy infrastructure
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy SQS
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: email-worker-sqs
          template: cloudformation/sqs.yml
          no-fail-on-empty-changeset: 1

      - name: Deploy ECR
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: email-worker-ecr
          template: cloudformation/ecr.yml
          no-fail-on-empty-changeset: 1

  deploy_worker:
    name: Deploy worker to ECS
    runs-on: ubuntu-latest
    environment: production
    needs: [ 'deploy_infra' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Run tests
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          coverage run -m unittest discover -s src/tests -v
          coverage report

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}
          mask-password: "true"

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: email-sender-service-ecr
          IMAGE_TAG: ${{ github.run_id }}
        run: |          
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy worker
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: email-worker-ecs
          template: cloudformation/ecs.yml
          parameter-overrides: "Revision=${{ github.run_id }},MailgunDomain=${{ secrets.MAILGUN_DOMAIN }},MailgunApiKey=${{ secrets.MAILGUN_API_KEY }}"
          no-fail-on-empty-changeset: 1